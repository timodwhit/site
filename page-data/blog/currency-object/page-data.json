{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/currency-object/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Tim Whitney"}},"markdownRemark":{"id":"f53f8610-6db4-5eb9-86b7-4630e3351d17","excerpt":"Objects in PHP have been around for a while now. And objects in Drupal have as well, but Drupal was predominately filled (and still suffers the fate) of beingâ€¦","html":"<p>Objects in PHP have been around for a while now. And objects in Drupal have as well, but Drupal was predominately filled (and still suffers the fate) of being tied to\narrays and their inherent inability to expose what can and can't be on an object.</p>\n<p>Here is an example of a useful object when working on sites that may have\ndifferent display variants for a currency.</p>\n<h3>Array Version</h3>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$currency</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string single-quoted-string\">'suffix'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'$'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string single-quoted-string\">'prefix'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">' USD'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string single-quoted-string\">'decimal-count'</span> <span class=\"token operator\">=></span>  <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string single-quoted-string\">'decimal-separator'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'.'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string single-quoted-string\">'thousands-separator'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">','</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Not too bad.. And let's create a function to auto generate that array for ease\nof use and possible debugging.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/**\n * Create a currency array.\n *\n * @param string $suffix\n * @param string $prefix\n * @param string $decimalCount\n * @param string $decimalSeparator\n * @param string $thousandsSeparator\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getCurrencyFormat</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$suffix</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'$'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$prefix</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">' USD'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$decimalCount</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$decimalSeparator</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$thousandsSeparator</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string single-quoted-string\">'suffix'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$suffix</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string single-quoted-string\">'prefix'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$prefix</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string single-quoted-string\">'decimal-count'</span> <span class=\"token operator\">=></span>  <span class=\"token variable\">$decimalCount</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string single-quoted-string\">'decimal-separator'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$decimalSeparator</span>\n    <span class=\"token string single-quoted-string\">'thousands-separator'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$thousandsSeparator</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, let's take the currency format and create a number out of a value in some\ncode that means almost nothing.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// We'll load the default currency format here. Why not.</span>\n<span class=\"token variable\">$currencyFormat</span> <span class=\"token operator\">=</span> <span class=\"token function\">getCurrencyFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$variableFromOffScreen</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1234.56</span>\n<span class=\"token comment\">// I have a vague idea of how this should look, but let's just freehand it</span>\n<span class=\"token comment\">// because that is really how we write and nothing could go wrong...</span>\n<span class=\"token comment\">// Also, I just looked at number_format here:</span>\n<span class=\"token comment\">// https://www.php.net/manual/en/function.number-format.php so I'm going to use</span>\n<span class=\"token comment\">// those as the array keys, the other developer who wrote the getCurrencyFormat</span>\n<span class=\"token comment\">// function surely used those.</span>\n<span class=\"token variable\">$formattedValue</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'suffix'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">.</span> <span class=\"token function\">number_format</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'decimals'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'dec_point'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'thousands_sep'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'suffix'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>WSOD...</p>\n<p>Ah... Because it was an array, my IDE didn't auto populate the allowed values\nand there was a mismatch in my keys.</p>\n<p>Further, now this code is a one off of how the currency format is used. I could\nlook up the function and see how each key is being used, but then I have to go\nfind all the usages if I do want to go back and change thousands-separator to\nthousands-sep to match the variables in the number format function.</p>\n<h2>Object Implementation</h2>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\">\n<span class=\"token comment\">/**\n * Currency Format\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">CurrencyFormat</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token variable\">$suffix</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'$'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token variable\">$prefix</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">' USD'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token variable\">$decimals</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'2'</span> <span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token variable\">$decPoint</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'.'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token variable\">$thousandsSep</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">','</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getSuffix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">suffix</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">setSuffix</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$suffix</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">suffix</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$suffix</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getPrefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">prefix</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token operator\">...</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, let's develop with it.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// Object implementation.</span>\n<span class=\"token variable\">$currencyFormat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CurrencyFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Let's override the suffix;</span>\n<span class=\"token variable\">$currencyFormat</span><span class=\"token operator\">-></span><span class=\"token function\">setSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Array.</span>\n<span class=\"token comment\">// You could override the suffix in the arguments</span>\n<span class=\"token variable\">$currencyFormatArray</span> <span class=\"token operator\">=</span> <span class=\"token function\">getCurrencyFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$currencyFormatArray</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'suffix'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>No advantage, really. Now let's setup a function to format a value as a currency\nformat.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// Object</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">formatValueWithCurrency</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token class-name type-declaration\">CurrencyFormat</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token operator\">-></span><span class=\"token function\">getPrefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token function\">number_format</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token operator\">-></span><span class=\"token function\">getDecimals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token operator\">-></span><span class=\"token function\">getDecPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token operator\">-></span><span class=\"token function\">getThousandsSep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token operator\">-></span><span class=\"token function\">getSuffix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Or we could add a method to the CurrencyFormat and have it format that value</span>\n<span class=\"token comment\">// like:</span>\n<span class=\"token variable\">$currencyFormat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CurrencyFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$formattedValue</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token operator\">-></span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Array Version</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">formatValueWithCurrency</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">array</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// We can't be sure we are going to get a currency format array, so we have</span>\n  <span class=\"token comment\">// to settle for some good ole checks.</span>\n  <span class=\"token comment\">// Also, this is gonna get smelly.</span>\n  <span class=\"token variable\">$prefix</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'prefix'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">??</span> <span class=\"token string single-quoted-string\">'$'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$suffix</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'suffix'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">??</span> <span class=\"token string single-quoted-string\">' USD'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$decPoint</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'decPoint'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">??</span> <span class=\"token string single-quoted-string\">'.'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$thousandsSeparator</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'thousandsSep'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">??</span> <span class=\"token string single-quoted-string\">','</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$decimals</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$currencyFormat</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'decimals'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">??</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token variable\">$prefix</span> <span class=\"token operator\">.</span> <span class=\"token function\">number_format</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$decimals</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$decPoint</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$thousandsSeparator</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$suffix</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Things to note:</p>\n<ul>\n<li>Because we have to check the array value and assume a default, we are now\ndoubling our locations of default values.</li>\n<li>You could call the getCurrencyFormat array function in the formatValueWithCurrency,\nbut it is possible that you want to get the currency from a Node or some user\ndefined value and thus would need to pass the value.</li>\n<li>Arrays are cumbersome and don't guarantee properties exist. They are simple\nbuckets you can throw your mistakes into.</li>\n</ul>\n<p>So please just make it an object if there is any reuse to it and if it is a\npiece of standardized data. If you find yourself, constantly calling nested\nvalues on an array, it might be time to refactor into an object.</p>","frontmatter":{"title":"Make it an object please!","date":"May 03, 2020","description":"Objects are more than just scaffolding, they are an API for you and your devs to use."}}},"pageContext":{"slug":"/blog/currency-object/"}},
    "staticQueryHashes": ["3649515864","712016698"]}